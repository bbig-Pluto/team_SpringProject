<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.shm">

	<!-- 슈퍼어드민 페이지 회원정보 리스팅 -->
	<select id="selectAllMemberList" resultType="memberDTO">
		SELECT 
		substr(id,1,1) || lpad('*',length(id)-2,'*') || substr(id, length(id), 1)id, 
		lpad('*', LENGTH(pwd), '*')pwd, 
		nickname, emailadd, telnum, membernum, memberclass, joindate
		FROM syl_member
	</select>
	
	<!-- 로그인 체크, 슈퍼어드민과 그외 나머지 분기 -->
	<select id="loginResult" resultType="memberDTO" parameterType="MemberDTO">
		SELECT id, pwd, memberNum, memberClass 
		FROM syl_member 
		WHERE id=#{id} AND pwd=#{pwd}
	</select>
	
	<!-- 슈퍼어드민 전용 로그인 -->
	<select id="superLogin" resultType="memberDTO" parameterType="MemberDTO">
		SELECT id, memberNum, memberClass 
		FROM syl_superAdmin
		WHERE id=#{id} AND pwd=#{pwd}
	</select>
	
	<!-- ID 찾기 -->
	<select id="idSearching" resultType="String" parameterType="Hashmap">
		SELECT nvl(max(id), '0')
		FROM syl_member 
		WHERE emailAdd=#{emailAdd} AND telNum=#{telNum}
	</select>
	
	<!-- 회원가입 반영 전 ID 중복체크 -->
	<select id="idDupleCheck" resultType="int" parameterType="String">
		SELECT NVL(count(*), 0) FROM (
			select count(id) 
			from syl_member 
			WHERE id=#{_parameter} group by id
		)
	</select>
	
	<!-- 회원가입, 일반회원 관리자 분기 포함, seq 번호가 분리돼있음 -->
	<insert id="addMember" parameterType="Hashmap">
	
		<!-- seq_userNum.nextval -->
		<if test ="memberClass == 0">
			INSERT INTO syl_member(id, pwd, nickName, emailAdd, telNum, memberNum, memberClass)
			VALUES(#{id}, #{pwd}, #{nickName}, #{emailAdd}, #{telNum}, seq_userNum.nextval, #{memberClass})
		</if>
		
		<!-- seq_adminNum.nextval -->
		<if test ="memberClass >= 1">
			INSERT INTO syl_member(id, pwd, nickName, emailAdd, telNum, memberNum, memberClass)
			VALUES(#{id}, #{pwd}, #{nickName}, #{emailAdd}, #{telNum}, seq_adminNum.nextval, #{memberClass})
		</if>
		
	</insert>
	
	<!-- 비밀번호 재설정 전 계정 확인 -->
	<select id="enquiryForPwdRewriting" resultType="String" parameterType="Hashmap">
		select NVL(max(memberNum), '0')
		from syl_member
		WHERE id=#{id} and telNum=#{telNum}
	</select>
	
	<!-- 비밀번호 재설정 -->
	<update id="reWritingNewPwd" parameterType="Hashmap">
		update syl_member set
		pwd=#{newPwd}
		where memberNum=#{memberNum}
	</update>
	
	<!-- 슈퍼어드민 페이지에서의 회원삭제 -->
	<delete id="delMemFromAdmin" parameterType="String">
		DELETE syl_member 
		WHERE memberNum=#{_parameter}
	</delete>
	
	<!-- 슈퍼어드민 페이지 회원 정보 수정을 위해 회원 DB 조회 -->
	<select id="enquireMemFromAdmin" resultType="memberDTO" parameterType="String">
	<![CDATA[
		SELECT 
		substr(id,1,1) || lpad('*',length(id)-2,'*') || substr(id, length(id), 1)id, 
		lpad('*', LENGTH(pwd), '*')pwd, 
		nickname, emailadd, telnum, membernum, memberclass, joindate
		FROM syl_member 
		where memberNum=#{_parameter}
	]]>
	</select>
	
	<!-- 슈퍼어드민 회원정보 수정 -->
	<update id="modifyMemInfoFromAdmin" parameterType="MemberDTO">
		update syl_member SET 
		telNum=#{telNum}, 
		nickName=#{nickName}, 
		emailAdd=#{emailAdd} 
		where memberNum=#{memberNum}
	</update>
	
	<!-- 마이페이지 회원탈퇴 -->
	<delete id="delAccountInfoSelf" parameterType="String">
		DELETE syl_member WHERE memberNum=#{_parameter}
	</delete>
	
	<delete id="deleteDiaryContents" parameterType="String">
<!-- 		DELETE Diary WHERE memberNum=#{_parameter} -->
		DELETE delCtntTest1 WHERE id=#{_parameter}
	</delete>
	
	<delete id="deleteExerciseContents" parameterType="String">
<!-- 		DELETE Exercise WHERE memberNum=#{_parameter} -->
		DELETE delCtntTest2 WHERE id=#{_parameter}
	</delete>
	
	<delete id="deleteWishListContents" parameterType="String">
<!-- 		DELETE wishlist WHERE memberNum=#{_parameter} -->
		ELETE delCtntTest2 WHERE id=#{_parameter}
	</delete>
	
	<!-- 마이페이지에서의 회원정보 수정을 위한 전시용 데이터 추출 -->
	<select id="memberInfoForModify" resultType="memberDTO" parameterType="String">
<!-- 		select id, pwd, nickName, memberNum, emailAdd, telNum, memberclass, joinDate  -->
<!-- 		from syl_member  -->
<!-- 		where memberNum=#{_parameter} -->
		
		<![CDATA[
			SELECT  
			substr(id,1,1) || lpad('*',length(id)-2,'*') || substr(id, length(id), 1)id,
			lpad('*', LENGTH(pwd), '*')pwd,
			nickname, emailadd, telnum, membernum, memberclass, joindate
	 		FROM syl_member
			where memberNum=#{_parameter}
		]]> --> -->
	</select>
	
	<!-- 마이페이지에서 직접 회원정보 수정 반영 -->
	<update id="modifyMemberInfoSelf" parameterType="MemberDTO">
		update syl_member SET 
		nickName=#{nickName}, 
		emailAdd=#{emailAdd},
		telNum=#{telNum}
		where memberNum=#{memberNum}
	</update>
	
	<!-- 마이페이지 진입 전 비밀번호 확인 -->
	<select id="queryResultForMyPage" resultType="int" parameterType="MemberDTO">
		SELECT NVL(count(pwd), 0) FROM (
			select pwd, memberNum
			from syl_member 
			WHERE memberNum = #{ memberNum } and pwd = #{ pwd } 
			group by pwd, memberNum
		)
	</select>
	
	<!-- SuperAdmin Table 의 인증코드 조회&비교, 관리자 가입에 부여해줄 memberClass 반환, admin의 회원가입 Controller 에 존재 -->
	<select id="enquiryPermittingMemberClass" resultType="int" parameterType="String">
		SELECT nvl(max(permittingMemberClass), 0)
		FROM syl_superAdmin 
		WHERE RN_ForAdminSignUp = #{_parameter}
	</select>
	
	<!-- SuperAdmin이 기입한 가입할 admin의 관리등급 설정 -->
	<update id="setAdminClass" parameterType="int">
		UPDATE syl_superAdmin
		SET permittingMemberClass = #{_paratemter}
		WHERE id = 'superadmin'
	</update>
	
	<!-- admin이 가입할 때 기입해야할 난수 코드 저장 -->
	<update id="permittingMemberClass" parameterType="String">
		UPDATE syl_superAdmin
		SET RN_ForAdminSignUp = #{_paratemter}
		WHERE id = 'superadmin'
	</update>
	
</mapper>